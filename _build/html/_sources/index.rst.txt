.. assignment_2 documentation master file, created by
   sphinx-quickstart on Fri Mar 28 13:08:46 2025.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to assignment_2's documentation!
========================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. My ROS Action Client/Service documentation master file

Welcome to the ROS Action Client/Service Documentation
=====================================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   installation
   usage
   modules/action_client
   modules/last_target_service
   api
   
   Action Client Module
====================

.. automodule:: action_client
   :members:
   :undoc-members:
   :show-inheritance:

Class Documentation
-------------------

.. autoclass:: ActionClient
   :members:
   :special-members: __init__

   .. automethod:: run
   .. automethod:: odom_callback
   .. automethod:: feedback_callback
   .. automethod:: send_goal
   .. automethod:: cancel_goal
   .. automethod:: get_input
   
   Last Target Service Module
=========================

.. automodule:: Last_target_service
   :members:
   :undoc-members:
   :show-inheritance:

Class Documentation
-------------------

.. autoclass:: ServiceNode
   :members:
   :special-members: __init__

   .. automethod:: goal_callback
   .. automethod:: handle_last_goal_request
   
   Installation
============

Prerequisites
-------------
- ROS Noetic (or your ROS version)
- Python 3
- Required ROS packages: ``nav_msgs``, ``actionlib_msgs``

Installation Steps
------------------

1. Clone the repository:

   .. code-block:: bash

      git clone <your-repository-url>
      cd <repository-folder>

2. Build the workspace:

   .. code-block:: bash

      catkin_make
      source devel/setup.bash

3. Ensure the Python files are executable:

   .. code-block:: bash

      chmod +x src/assignment_2_2024/scripts/action_client.py
      chmod +x src/assignment_2_2024/scripts/Last_target_service.py
      
      Usage
=====

Running the Action Client
------------------------

1. Start ROS core:

   .. code-block:: bash

      roscore

2. Run the action client:

   .. code-block:: bash

      rosrun assignment_2_2024 action_client.py

3. Available commands:
   - 's': Set a new goal (you'll be prompted for x,y coordinates)
   - 'c': Cancel the current goal
   - 'q': Quit the action client

Running the Last Target Service
------------------------------

1. Start the service node:

   .. code-block:: bash

      rosrun assignment_2_2024 Last_target_service.py

2. Call the service to get the last target:

   .. code-block:: bash

      rosservice call /get_last_goal
      
      API Reference
=============

Action Client
-------------

.. autoclass:: action_client.ActionClient
   :members:

Last Target Service
-------------------

.. autoclass:: Last_target_service.ServiceNode
   :members:

Messages and Services
---------------------

- ``PlanningAction``: Action message for goal planning
- ``PlanningGoal``: Goal message containing target pose
- ``RobotFeedback``: Custom message for robot position/velocity feedback
- ``LastTarget``: Service definition for getting last goal
